export PATH=$HOME/bin:/usr/local/bin:$PATH
export EDITOR=vim

# Path to your oh-my-zsh installation.
{{- if eq .chezmoi.osRelease.id "arch" "endeavouros" }}
export ZSH="/usr/share/oh-my-zsh"
{{- else }}
export ZSH="$HOME/.oh-my-zsh"
{{- end }}
export ZSH_CUSTOM=$HOME/.zsh
export ZSH_COMPDUMP=$HOME/.cache/zsh/zcompdump

# Set name of the theme to load. Optionally, if you set this to "random"
{{- if eq .chezmoi.osRelease.id "kali" }}
ZSH_THEME="themes/kali"
{{- else if eq .chezmoi.hostname "Glamdring" }}
ZSH_THEME="themes/glamdring"
{{- else }}
ZSH_THEME="dst"
{{- end }}
local ret_status="%(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ )"
PROMPT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'
RPROMPT="[%D{%y/%m/%f}|%@]"

{{- if eq .chezmoi.osRelease.id "arch" "endeavouros" }}
# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"
{{- end }}

{{- if eq .chezmoi.hostname "Glamdring" }}

#Scale QT apps for HDPI scrren
export QT_QPA_PLATFORMTHEME=qt5ct
export QT_SCALE_FACTOR=1.5
{{- end }}

#Oh My ZSH Plugins
{{- if eq .chezmoi.osRelease.id "arch" "endeavouros" }}
plugins=(
  git
)

#source for AUR installed plugins
source $ZSH/oh-my-zsh.sh
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
{{- else }}
plugins=(
  git
)

source $ZSH/oh-my-zsh.sh
source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
{{- end }}

# Compilation flags
export ARCHFLAGS="-arch x86_64"

#ssh-agent
#eval $(ssh-agent -t 5d)
#Ensure agent is running
ssh-add -l &>/dev/null
if [[ "$?" == 2 ]]; then
    # Could not open a connection to your authentication agent.

    # Load stored agent connection info.
    test -r ~/.ssh-agent && \
        eval "$(<~/.ssh-agent)" >/dev/null

    ssh-add -l &>/dev/null
    if [[ "$?" == 2 ]]; then
        # Start agent and store agent connection info.
        (umask 066; ssh-agent > ~/.ssh-agent)
        eval "$(<~/.ssh-agent)" >/dev/null
    fi
fi

# Load SSH identities
ssh-add -l &>/dev/null
if [[ "$?" == 1 ]]; then
    # The agent has no identities.
    # Time to add one.
{{- if eq .chezmoi.osRelease.id "kali" }}
    ssh-add -t 5d
{{- else }}
    ssh-add -t 1d
{{- end }}
fi

{{- if eq .chezmoi.osRelease.id "kali" }}

#Named Directories
hash -d host=/media/sf_Host_Share/

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/root/google-cloud-sdk/path.zsh.inc' ]; then . '/root/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/root/google-cloud-sdk/completion.zsh.inc' ]; then . '/root/google-cloud-sdk/completion.zsh.inc'; fi

##Virtualenv
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
source /usr/local/bin/virtualenvwrapper.sh
 
##ORACLE SHIT
export ORACLE_HOME=/usr/lib/oracle/11.2/client64
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME/lib
 
##JAVA SHIT
JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/
PATH_TO_FX=/usr/share/openjfx/lib/
unset _JAVA_OPTIONS
{{- end }}

#Enable Parallel to read ENV
. `which env_parallel.sh`

##GO
export GOPATH=~/.go
export GOBIN=~/.go/bin
{{- if eq .chezmoi.osRelease.id "kali" }}
export PATH=$GOBIN:/opt/scriptreplay_ng/:$PATH
{{- else }}
export PATH=$GOBIN:$PATH
{{- end }}

##PIPX Completions
autoload -Uz compinit
compinit
autoload -U bashcompinit
bashcompinit
eval "$(register-python-argcomplete pipx)"

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='grep -E --color=auto'
fi

# ls aliases
alias ll='ls -lh'
alias la='ls -A'
alias l='ls -CF'

#Safety First
alias mv='mv -i'
alias rm='rm -i'
alias cp='cp -i'
alias del='trash'

source ~/.zsh_aliases

#History info
export HISTFILE=$HOME/.zsh_history
export HISTSIZE=1000000000
export SAVEHIST=$HISTSIZE
setopt hist_ignore_all_dups
setopt INC_APPEND_HISTORY
setopt HIST_SAVE_NO_DUPS
setopt HIST_FIND_NO_DUPS
